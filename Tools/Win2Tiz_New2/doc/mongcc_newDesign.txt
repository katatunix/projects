- generate .d file
- read the .d file and send all files inside it
- send the compile command
- receive the compile result and write output to file .o


Remote:
	Remote(host, port);
	connect(): bool
	
	isConnected(): bool
	isCompiling(): bool
	
	compile()
	{
		if (isCompiling())
		{
			return an error TCompileResult
		}
		
		if (!isConnected())
		{
			local();
		}
		else
		{
			.....
		}
	}
	
	
Session
{
	m_remotes: List<Remote>
	compile()
	{
		Remote bestRemote = null;
		int countConnected = 0;
		foreach remote in m_remotes
		{
			if (remote.isConnected()) countConnected++;
			if (remote.isConnected() && !remote.isCompiling())
			{
				// use this remote
				bestRemote = remote;
				break;
			}
		}
		
		if (bestRemote != null)
		{
			return bestRemote.compile();
		}
		
		int needed;
		if (countConnected < needed)
		{
			// try to make a remote connected -> bestRemote
		}
		
		if (bestRemote != null)
		{
			return bestRemote.compile();
		}
		
		// opps, we cannot connect to any remote, try local
		
		foreach remote in m_remotes
		{
			if (!remote.isConnected() && !remote.isCompiling())
			{
				bestRemote = remote;
				break;
			}
		}
		
		if (bestRemote != null)
		{
			return bestRemote.compile();
		}
		
		// WTF???
		return an error TCompileResult
	}
}