<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" GeneratedClassNamespace="PLog.Properties" GeneratedClassName="Settings">
  <Profiles />
  <Settings>
    <Setting Name="parse_stack_py" Type="System.String" Scope="User">
      <Value Profile="(Default)">import sys
import re
import os

sohead = re.compile('(.+\.so):')
funchead = re.compile('([0-9a-f]{8}) &lt;(.+)&gt;:')
funcline = re.compile('^[ ]+([0-9a-f]+):.+')

LogfilePath = sys.argv[1]

So_LibraryPath = sys.argv[2]
So_LibraryFile = os.path.basename(os.path.splitext(So_LibraryPath)[0])

ArmAebi = sys.argv[3]

def parsestack( lines ):
    crashline = re.compile('.+pc.([0-9a-f]{8}).+%s' % So_LibraryFile )
    ret = []
    for l in lines:
        m = crashline.match(l)
        if m:
			addr =  m.groups()[0]
			os.system("%s -f -e %s %s" % (ArmAebi , So_LibraryPath , addr) )
    return ret

def parseasm( lines ):
    ret = []
    current = None
    for l in lines:
        m = funchead.match(l)
        if m:
            if current:
                ret.append(current)
            startaddr, funcname =  m.groups()
            current = [ funcname, int(startaddr,16), int(startaddr,16) ]
        m = funcline.match(l)
        if m:
            addr =  m.groups()[0]
            if current != None:
                current[2] = int(addr,16)
        m = sohead.match(l)
        if m:
            so =  m.groups()[0]
            so = os.path.split(so)[1]
    return so, ret

if __name__=="__main__":
    stack = parsestack( file(LogfilePath).read().split('\n'))
</Value>
    </Setting>
  </Settings>
</SettingsFile>